/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as SigninImport } from './routes/signin'
import { Route as SearchImport } from './routes/search'
import { Route as ProtectedImport } from './routes/protected'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as CartPageImport } from './routes/cartPage'
import { Route as SellerDashboardImport } from './routes/SellerDashboard'
import { Route as IndexImport } from './routes/index'
import { Route as TestIndexImport } from './routes/test/index'
import { Route as TestTestIdImport } from './routes/test/$testId'
import { Route as ProductProductidImport } from './routes/product.$productid'
import { Route as FarmfarmidImport } from './routes/farm.&farmid'
import { Route as CategorycategoryidImport } from './routes/category.&categoryid'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/protected',
  path: '/protected',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const CartPageRoute = CartPageImport.update({
  id: '/cartPage',
  path: '/cartPage',
  getParentRoute: () => rootRoute,
} as any)

const SellerDashboardRoute = SellerDashboardImport.update({
  id: '/SellerDashboard',
  path: '/SellerDashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TestIndexRoute = TestIndexImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRoute,
} as any)

const TestTestIdRoute = TestTestIdImport.update({
  id: '/test/$testId',
  path: '/test/$testId',
  getParentRoute: () => rootRoute,
} as any)

const ProductProductidRoute = ProductProductidImport.update({
  id: '/product/$productid',
  path: '/product/$productid',
  getParentRoute: () => rootRoute,
} as any)

const FarmfarmidRoute = FarmfarmidImport.update({
  id: '/farm/&farmid',
  path: '/farm/&farmid',
  getParentRoute: () => rootRoute,
} as any)

const CategorycategoryidRoute = CategorycategoryidImport.update({
  id: '/category/&categoryid',
  path: '/category/&categoryid',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/SellerDashboard': {
      id: '/SellerDashboard'
      path: '/SellerDashboard'
      fullPath: '/SellerDashboard'
      preLoaderRoute: typeof SellerDashboardImport
      parentRoute: typeof rootRoute
    }
    '/cartPage': {
      id: '/cartPage'
      path: '/cartPage'
      fullPath: '/cartPage'
      preLoaderRoute: typeof CartPageImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/protected': {
      id: '/protected'
      path: '/protected'
      fullPath: '/protected'
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/category/&categoryid': {
      id: '/category/&categoryid'
      path: '/category/&categoryid'
      fullPath: '/category/&categoryid'
      preLoaderRoute: typeof CategorycategoryidImport
      parentRoute: typeof rootRoute
    }
    '/farm/&farmid': {
      id: '/farm/&farmid'
      path: '/farm/&farmid'
      fullPath: '/farm/&farmid'
      preLoaderRoute: typeof FarmfarmidImport
      parentRoute: typeof rootRoute
    }
    '/product/$productid': {
      id: '/product/$productid'
      path: '/product/$productid'
      fullPath: '/product/$productid'
      preLoaderRoute: typeof ProductProductidImport
      parentRoute: typeof rootRoute
    }
    '/test/$testId': {
      id: '/test/$testId'
      path: '/test/$testId'
      fullPath: '/test/$testId'
      preLoaderRoute: typeof TestTestIdImport
      parentRoute: typeof rootRoute
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/SellerDashboard': typeof SellerDashboardRoute
  '/cartPage': typeof CartPageRoute
  '/dashboard': typeof DashboardRoute
  '/protected': typeof ProtectedRoute
  '/search': typeof SearchRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/category/&categoryid': typeof CategorycategoryidRoute
  '/farm/&farmid': typeof FarmfarmidRoute
  '/product/$productid': typeof ProductProductidRoute
  '/test/$testId': typeof TestTestIdRoute
  '/test': typeof TestIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/SellerDashboard': typeof SellerDashboardRoute
  '/cartPage': typeof CartPageRoute
  '/dashboard': typeof DashboardRoute
  '/protected': typeof ProtectedRoute
  '/search': typeof SearchRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/category/&categoryid': typeof CategorycategoryidRoute
  '/farm/&farmid': typeof FarmfarmidRoute
  '/product/$productid': typeof ProductProductidRoute
  '/test/$testId': typeof TestTestIdRoute
  '/test': typeof TestIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/SellerDashboard': typeof SellerDashboardRoute
  '/cartPage': typeof CartPageRoute
  '/dashboard': typeof DashboardRoute
  '/protected': typeof ProtectedRoute
  '/search': typeof SearchRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/category/&categoryid': typeof CategorycategoryidRoute
  '/farm/&farmid': typeof FarmfarmidRoute
  '/product/$productid': typeof ProductProductidRoute
  '/test/$testId': typeof TestTestIdRoute
  '/test/': typeof TestIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/SellerDashboard'
    | '/cartPage'
    | '/dashboard'
    | '/protected'
    | '/search'
    | '/signin'
    | '/signup'
    | '/category/&categoryid'
    | '/farm/&farmid'
    | '/product/$productid'
    | '/test/$testId'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/SellerDashboard'
    | '/cartPage'
    | '/dashboard'
    | '/protected'
    | '/search'
    | '/signin'
    | '/signup'
    | '/category/&categoryid'
    | '/farm/&farmid'
    | '/product/$productid'
    | '/test/$testId'
    | '/test'
  id:
    | '__root__'
    | '/'
    | '/SellerDashboard'
    | '/cartPage'
    | '/dashboard'
    | '/protected'
    | '/search'
    | '/signin'
    | '/signup'
    | '/category/&categoryid'
    | '/farm/&farmid'
    | '/product/$productid'
    | '/test/$testId'
    | '/test/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SellerDashboardRoute: typeof SellerDashboardRoute
  CartPageRoute: typeof CartPageRoute
  DashboardRoute: typeof DashboardRoute
  ProtectedRoute: typeof ProtectedRoute
  SearchRoute: typeof SearchRoute
  SigninRoute: typeof SigninRoute
  SignupRoute: typeof SignupRoute
  CategorycategoryidRoute: typeof CategorycategoryidRoute
  FarmfarmidRoute: typeof FarmfarmidRoute
  ProductProductidRoute: typeof ProductProductidRoute
  TestTestIdRoute: typeof TestTestIdRoute
  TestIndexRoute: typeof TestIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SellerDashboardRoute: SellerDashboardRoute,
  CartPageRoute: CartPageRoute,
  DashboardRoute: DashboardRoute,
  ProtectedRoute: ProtectedRoute,
  SearchRoute: SearchRoute,
  SigninRoute: SigninRoute,
  SignupRoute: SignupRoute,
  CategorycategoryidRoute: CategorycategoryidRoute,
  FarmfarmidRoute: FarmfarmidRoute,
  ProductProductidRoute: ProductProductidRoute,
  TestTestIdRoute: TestTestIdRoute,
  TestIndexRoute: TestIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/SellerDashboard",
        "/cartPage",
        "/dashboard",
        "/protected",
        "/search",
        "/signin",
        "/signup",
        "/category/&categoryid",
        "/farm/&farmid",
        "/product/$productid",
        "/test/$testId",
        "/test/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/SellerDashboard": {
      "filePath": "SellerDashboard.tsx"
    },
    "/cartPage": {
      "filePath": "cartPage.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/protected": {
      "filePath": "protected.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/category/&categoryid": {
      "filePath": "category.&categoryid.tsx"
    },
    "/farm/&farmid": {
      "filePath": "farm.&farmid.tsx"
    },
    "/product/$productid": {
      "filePath": "product.$productid.tsx"
    },
    "/test/$testId": {
      "filePath": "test/$testId.tsx"
    },
    "/test/": {
      "filePath": "test/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
